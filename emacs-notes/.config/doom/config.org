#+title: Config
#+auto_tangle: t
#+STARTUP: showeverything
#+PROPERTY:header-args :tangle config.el
#+begin_src elisp
;; org-roam-db-location
;; org-roam-node-find
#+end_src
* Set Font
#+begin_src elisp
;; FiraCode Nerd Font
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 22))
#+end_src

* ORG MODE Main org
#+begin_src elisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/roam/org"
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ↴ " ; ⇩ ▼ ↴
        ;; org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        ;; org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "BLOG(b)"           ; Blog writing assignments
             "GYM(g)"            ; Things to accomplish at the gym
             "PROJ(p)"           ; A project that contains other tasks
             "VIDEO(v)"          ; Video assignments
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))) ; Task has been cancelled
;; (after! org
;;   (custom-set-faces
;;    ;; Font sizes and colors for Org mode headers using Doom One theme colors
;;    '(org-level-1 ((t (:height 1.4 :foreground "#51afef"))))
;;    '(org-level-2 ((t (:height 1.3 :foreground "#c678dd"))))
;;    '(org-level-3 ((t (:height 1.2 :foreground "#a9a1e1"))))
;;    '(org-level-4 ((t (:height 1.0 :foreground "#7cc3f3"))))
;;    '(org-level-5 ((t (:height 1.0 :foreground "#d499e5"))))
;;    '(org-level-6 ((t (:height 1.9 :foreground "#a8d7f7"))))
;;    '(org-level-7 ((t (:height 1.9 :foreground "#e2bbee"))))
;;    '(org-level-8 ((t (:height 1.9 :foreground "#dceffb"))))
;;    ;; Add more levels and colors as needed
;;    ))


 ;; (setq org-emphasis-alist
 ;;  '(("*" (bold :slant italic :weight black :foreground "#1ABC9C" )) ; blue-green
 ;;    ("/" (italic :foreground "#F3CA40" ))
 ;;    ("_" (:underline t  )) ; light green
 ;;    ("=" (:foreground "#E74C3C")) ;red
 ;;    ("~" (:foreground "#53df83" )) ; lime green
 ;;    ("+" (:strike-through t :foreground "#FFC300" )))) ;orange

(after! org
  (custom-set-faces
   ;; Font sizes and colors for Org mode headers using Doom One theme colors
   '(org-level-1 ((t (:height 1.4  :inherit outline-1 ultra-bold))))
   '(org-level-2 ((t (:height 1.3  :inherit outline-2 extra-bold))))
   '(org-level-3 ((t (:height 1.2  :inherit outline-3 bold))))
   '(org-level-4 ((t (:height 1.0  :inherit outline-4 semi-bold))))
   '(org-level-5 ((t (:height 1.0  :inherit outline-5 normal))))
   '(org-level-6 ((t (:height 0.9  :inherit outline-6 normal))))
   '(org-level-7 ((t (:height 0.9  :inherit outline-7 normal))))
   '(org-level-8 ((t (:height 0.9  :inherit outline-8 normal))))
   ;; Add more levels and colors as needed
   ))
        ;; Define function to set Doom One colors for Org mode headers
  ;; "Search org-roam directory using consult-ripgrep. With live-preview."
(defun my/org-search ()
  "Search org-files directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-args "rg --null --ignore-case --type org --line-buffered --color=never --max-columns=500 --no-heading --line-number"))
    (consult-ripgrep org-directory)))

(after! org
  (map! :leader
        (:prefix ("n" . "notes")
          :desc "Org-grep/search" "g " #'my/org-search)))

(defun org-roam-search ()
  "Search org-roam directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-args "rg --null --ignore-case --type org --line-buffered --color=never --max-columns=500 --no-heading --line-number"))
    (consult-ripgrep org-roam-directory)))

;; "With prefix arg, prompt for DIRECTORY to search tags."
(defun my-tags-view (&optional directory)
  "With prefix arg, prompt for DIRECTORY to search tags."
  (interactive (list (if current-prefix-arg (read-directory-name "Directory: "))))
  (let ((directory (or directory org-roam-directory)))
    ;; forward prefix arg - this makes it so prefix args passed to `org-tags-view'
    ;; require one more prefix, eg. C-u C-u my-tags-view => todo-only tags
    (setq current-prefix-arg
          (unless (equal current-prefix-arg '(4))
            (list (ash (prefix-numeric-value current-prefix-arg) -2))))
    (let ((org-agenda-files (list directory)))
      (call-interactively #'org-tags-view))))



;; Key binding setup
(after! org-roam
  (map! :leader
        (:prefix ("n" . "notes")
          :desc "Org-roam search" "r S" #'org-roam-search)))
#+end_src
*** Make Numbered Lists
#+begin_src elisp
  (defun org-make-olist (arg)
    (interactive "P")
    (let ((n (or arg 1)))
      (when (region-active-p)
        (setq n (count-lines (region-beginning)
                             (region-end)))
        (goto-char (region-beginning)))
      (dotimes (i n)
        (beginning-of-line)
        (insert (concat (number-to-string (1+ i)) ". "))
        (forward-line))))
(map! :leader
      :desc "Create a Numbered List"
      "C-|" #'org-make-olist )
#+end_src
** org-superstar-mode / olivetti-mode
#+begin_src elisp
(add-hook 'org-mode-hook 'org-superstar-mode)
 (add-hook 'org-mode-hook 'olivetti-mode)
 (setq olivetti-body-width 100)

(require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

;; This is usually the default, but keep in mind it must be nil
(setq org-hide-leading-stars nil)
;; This line is necessary.
(setq org-superstar-leading-bullet ?\s)
;; If you use Org Indent you also need to add this, otherwise the
;; above has no effect while Indent is enabled.
(setq org-indent-mode-turns-on-hiding-stars nil)

;; off list
(setq org-superstar-item-bullet-alist nil)
;; (setq org-superstar-item-bullet-alist
;;       '((?* . ?•)  ;; * becomes •
;;         (?+ . ?➤)  ;; + becomes ➤
;;         (?- . ?–))) ;; - becomes –

;; (setq org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○"))
;; (setq org-superstar-headline-bullets-list '(" " " " "-" "·" "-" "·"))
#+end_src
** org-modern-mode
#+begin_src elisp
;; Option 1: Per buffer
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

;; off bullets from org-modern-mode
(setq org-modern-star 'replace)

;; off all bullets
;; (setq org-modern-hide-stars 't)  ;; Hide all stars

;; (setq org-modern-priority nil)

;; off list
(setq org-modern-list nil)

;; Option 2: Globally
;; (with-eval-after-load 'org (global-org-modern-mode))
#+end_src

* Org-preview-html-mode
#+begin_src elisp
(require 'org-preview-html)
#+end_src
+ usage
  Open an Org file and execute =M-x org-preview-html-mode.= A preview window opens next to the Org file. If you want to manage this window separate (aka, make it a frame) use the function =org-preview-html-pop-window-to-frame.=
** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'dt/insert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.
#+begin_src elisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun dt/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'dt/insert-auto-tangle-tag)
#+end_src

** org roam
#+begin_src elisp
(after! org-roam
  (setq org-roam-directory "~/roam/")
  (setq org-roam-completion-everywhere t)
  ;; (setq org-roam-graph-viewer "~/usr/bin/brave")
  ;; Additional keybinding in org-mode-map
  (map! :map org-mode-map
        ;; Use `C-M-i` for completion-at-point
        "C-M-i" #'completion-at-point)
  ;; Enable org-roam
  (org-roam-db-autosync-enable))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

;; Bind this to SPC n r I
(defun my/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(map! :leader
      :prefix ("n" . "notes")
      :desc "Insert org-roam node" "r I" #'my/org-roam-node-insert-immediate)

;; Removing timestamp from filename
(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target (file+head "${slug}.org"
                              "#+title: ${title}\n")
           :unnarrowed t))))

(defun my/org-roam-list-tags ()
  "List all unique tags from Org Roam notes in a separate buffer."
  (interactive)
  (if (not (bound-and-true-p org-roam-directory))
      (error "Org Roam directory is not set.")
    (let ((tags '()))
      ;; Collect tags from Org Roam notes
      (dolist (file (directory-files-recursively org-roam-directory "\\.org$"))
        (with-temp-buffer
          (insert-file-contents file)
          (org-mode)
          (org-element-map (org-element-parse-buffer) 'headline
            (lambda (headline)
              (let ((headline-tags (org-element-property :tags headline)))
                (setq tags (append tags headline-tags)))))))

      ;; Remove duplicates and sort tags
      (setq tags (delete-dups tags))
      (setq tags (sort tags 'string<))

      ;; Create and populate a new buffer with the tags
      (let ((buf (get-buffer-create "*Org Roam Tags*")))
        (with-current-buffer buf
          (erase-buffer)
          (insert "Tags:\n")
          (dolist (tag tags)
            (insert (format "%s\n" tag)))
          (goto-char (point-min)))
        (display-buffer buf)))))

;; roam-tags
(defun my/org-roam-tags-search (&optional todo-only match)
  "Show all headlines for files in `org-roam-directory` matching a TAGS criterion.
The prefix arg TODO-ONLY limits the search to TODO entries."
  (interactive "P")
  (when org-agenda-overriding-arguments
    (setq todo-only (car org-agenda-overriding-arguments)
          match (nth 1 org-agenda-overriding-arguments)))
  (let* ((org-tags-match-list-sublevels
          org-tags-match-list-sublevels)
         (completion-ignore-case t)
         (org--matcher-tags-todo-only todo-only)
         rtn rtnall files file pos matcher
         buffer)
    (when (and (stringp match) (not (string-match "\\S-" match)))
      (setq match nil))
    (catch 'exit
      (setq org-agenda-buffer-name
            (org-agenda--get-buffer-name
             (and org-agenda-sticky
                  (if (stringp match)
                      (format "*Org Agenda(%s:%s)*"
                              (or org-keys (or (and todo-only "M") "m"))
                              match)
                    (format "*Org Agenda(%s)*"
                            (or (and todo-only "M") "m"))))))
      (setq matcher (org-make-tags-matcher match))
      ;; Prepare agendas (and `org-tag-alist-for-agenda') before
      ;; expanding tags within `org-make-tags-matcher'
      (org-agenda-prepare (concat "TAGS " match))
      (setq match (car matcher)
            matcher (cdr matcher))
      (org-compile-prefix-format 'tags)
      (org-set-sorting-strategy 'tags)
      (setq org-agenda-query-string match)
      (setq org-agenda-redo-command
            (list 'roam-tags-view
                  `(quote ,org--matcher-tags-todo-only)
                  `(if current-prefix-arg nil ,org-agenda-query-string)))
      ;; Get files from `org-roam-directory`
      (setq files (directory-files-recursively org-roam-directory "\\.org\\'") ;; Find all .org files
            rtnall nil)
      (while (setq file (pop files))
        (catch 'nextfile
          (org-check-agenda-file file)
          (setq buffer (if (file-exists-p file)
                           (org-get-agenda-file-buffer file)
                         (error "No such file %s" file)))
          (if (not buffer)
              ;; If file does not exist, error message to agenda
              (setq rtn (list
                         (format "ORG-AGENDA-ERROR: No such org-file %s" file))
                    rtnall (append rtnall rtn))
            (with-current-buffer buffer
              (unless (derived-mode-p 'org-mode)
                (error "Agenda file %s is not in Org mode" file))
              (save-excursion
                (save-restriction
                  (if (eq buffer org-agenda-restrict)
                      (narrow-to-region org-agenda-restrict-begin
                                        org-agenda-restrict-end)
                    (widen))
                  (setq rtn (org-scan-tags 'agenda
                                           matcher
                                           org--matcher-tags-todo-only))
                  (setq rtnall (append rtnall rtn))))))))
      (org-agenda--insert-overriding-header
        (with-temp-buffer
          (insert "Headlines with TAGS match: ")
          (add-text-properties (point-min) (1- (point))
                               (list 'face 'org-agenda-structure
                                     'short-heading
                                     (concat "Match: " match)))
          (setq pos (point))
          (insert match "\n")
          (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure-filter))
          (setq pos (point))
          (unless org-agenda-multi
            (insert (substitute-command-keys
                     "Press \
\\<org-agenda-mode-map>`\\[universal-argument] \\[org-agenda-redo]' \
to search again\n")))
          (add-text-properties pos (1- (point))
                               (list 'face 'org-agenda-structure-secondary))
          (buffer-string)))
      (org-agenda-mark-header-line (point-min))
      (when rtnall
        (insert (org-agenda-finalize-entries rtnall 'tags) "\n"))
      (goto-char (point-min))
      (or org-agenda-multi (org-agenda-fit-window-to-buffer))
      (add-text-properties
       (point-min) (point-max)
       `(org-agenda-type tags
                         org-last-args (,org--matcher-tags-todo-only ,match)
                         org-redo-cmd ,org-agenda-redo-command
                         org-series-cmd ,org-cmd))
      (org-agenda-finalize)
      (setq buffer-read-only t))))
#+end_src
** org agenda
#+begin_src elisp
(after! org
  (setq org-agenda-files
  '("~/roam/org/agenda.org")))

;; https://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically
;; (setq org-agenda-files (directory-files-recursively "~/roam/" "\\.org$"))

(after! org-agenda
(setq
   ;; org-fancy-priorities-list '("[A]" "[B]" "[C]")
   ;; org-fancy-priorities-list '("❗" "[B]" "[C]")
   ;; org-fancy-priorities-list '("🔴" "🟡" "🟢")
   ;; org-fancy-priorities-list '("🔴" "🔵" "🟢")
   ;; org-fancy-priorities-list '("🟥" "🟧" "🟨")
   org-priority-faces
   '((?A :foreground "#ff6c6b" :weight bold)
     (?B :foreground "#98be65" :weight bold)
     (?C :foreground "#c678dd" :weight bold))
   org-agenda-block-separator 8411)

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))
          (tags "customtag"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks marked with customtag:")))

          (agenda "")
          (alltodo ""))))))
#+end_src
** org download
#+begin_src elisp
(after! org-download
(setq org-download-image-dir "~/roam/img/")
(setq-default org-download-image-dir "~/roam/img/"))
(after! org
(setq org-attach-directory "~/roam/img/"))
#+end_src
** deft
#+begin_src elisp
(after! deft
(setq deft-directory "~/roam/"
;; (setq deft-directory "~/notes/"
      deft-extension '("txt" "org" "md")
      ;; deft-strip-summary-regexp "\\([\n ]\\|^#\\+[[:upper:][:lower:]_]+:.*$\\)"
      ;; deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
      deft-use-filename-as-title t
      deft-recursive t))
#+end_src

** dired
#+begin_src elisp
;; dired
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump))

(after! dired
  (map! :map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)

  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file ; use dired-find-file instead of dired-open.
    (kbd "m") 'dired-mark
    (kbd "t") 'dired-toggle-marks
    (kbd "u") 'dired-unmark
    (kbd "C") 'dired-do-copy
    (kbd "D") 'dired-do-delete
    (kbd "J") 'dired-goto-file
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown
    (kbd "P") 'dired-do-print
    (kbd "R") 'dired-do-rename
    (kbd "T") 'dired-do-touch
    (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
    (kbd "Z") 'dired-do-compress
    (kbd "+") 'dired-create-directory
    (kbd "-") 'dired-do-kill-lines
    (kbd "% l") 'dired-downcase
    (kbd "% m") 'dired-mark-files-regexp
    (kbd "% u") 'dired-upcase
    (kbd "* %") 'dired-mark-files-regexp
    (kbd "* .") 'dired-mark-extension
    (kbd "* /") 'dired-mark-directories
    (kbd "; d") 'epa-dired-do-decrypt
    (kbd "; e") 'epa-dired-do-encrypt))

;; Get file icons in dired
(add-hook 'dired-mode-hook 'nerd-icons-dired-mode)

;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))

(defun my/dired-view-file ()
  (interactive)
  (dired-view-file)
  (local-set-key (kbd "<f5>") 'View-quit))

(after! dired
  (define-key dired-mode-map (kbd "<f5>") 'my/dired-view-file))
#+end_src
* Custom keys mouse
#+begin_src elisp
;; ;; Bind <mouse-9> to `next-buffer`
;; (map! :n "<mouse-9>" #'next-buffer)

;; ;; Bind <mouse-8> to `previous-buffer`
;; (map! :n "<mouse-8>" #'previous-buffer)

;; Bind <mouse-9> to `next-buffer` globally
(global-set-key [mouse-9] #'next-buffer)

;; Bind <mouse-8> to `previous-buffer` globally
(global-set-key [mouse-8] #'previous-buffer)
#+end_src

* doom appearance
#+begin_src elisp
 (setq global-vi-tilde-fringe-mode nil ) ; removes the tildas

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "…")              ; Unicode ellispis are nicer than "...", and also save /precious/ space

(display-time-mode 1)                             ; Enable time in the mode-line
(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode 1))                       ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words
(setq-default line-spacing 5)
(remove-hook 'after-init-hook #'doom-modeline-mode)
(setq org-indent-indentation-per-level 4)
#+end_src

* OPTIMIZING
#+begin_src elisp
;; Disable org-appear-mode
(add-hook 'org-mode-hook #'org-appear-mode)
;; Set a higher garbage collection threshold (e.g., 100 MB)
(setq gc-cons-threshold (* 100 1024 1024))

;; Disable flycheck
;; (global-flycheck-mode -1)

;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 23))))

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(setq font-lock-maximum-size 100000)
(setq font-lock-support-mode 'lazy-lock-mode)
;; Whether display the buffer name.
(setq doom-modeline-buffer-name t)
#+end_src
* custome function
#+begin_src elisp
;; Toggle Evil mode with F9
(global-set-key (kbd "<f9>") 'evil-mode)
#+end_src
* other config
** Remembering the last place you visited in a file
Sometimes it’s convenient for Emacs to remember the last location you were at when you visited a particular file. The save-place-mode can help with that!

Once you turn on this mode, Emacs will drop your cursor to the last visited location in any file that you open.
#+begin_src elisp
;; Remember and restore the last cursor location of opened files
(save-place-mode 1)

#+end_src

** Prevent using UI dialog's for prompts
Emacs will show prompts to confirm many different types of actions, and for some of them it shows a graphical dialog box. If you prefer to keep your Emacs workflow more keyboard-focused, you can turn off those dialog box prompts with this setting:
#+begin_src elisp
;; Don't pop up UI dialogs when prompting
(setq use-dialog-box nil)
#+end_src

** Automatically revert buffers for changed files
One thing that can be annoying about Emacs when you first start using it is that it doesn’t automatically refresh file buffers when the file on disk has been changed outside of Emacs. This can often happen when you’re using tools that generate some kind of text file output that you need to read in an Emacs buffer.

The global-auto-revert-mode will make Emacs watch the files for all open buffers for changes on disk and it will automatically refresh those buffers if they don’t have unsaved changes!
#+begin_src elisp
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
#+end_src
I also like adding the following setting to cause other types of buffers in Emacs to update when related files on disk have changed.

The place this is most useful is when you’re using Emacs’ excellent Dired package! The following setting will cause Dired buffers to be automatically refreshed when files get added or deleted from the directory you are browsing:
#+begin_src elisp
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
#+end_src

** On relative line numbers
#+begin_src elisp
;; (setq display-line-numbers-type 'relative)

;; off
(setq display-line-numbers-type nil)
#+end_src

** Set default shell in Emacs vterm
#+begin_src elisp
(setq shell-file-name (executable-find "fish"))
#+end_src

** multi-vterm
+ [[https://github.com/suonlight/multi-vterm][multi-vterm github]]
#+begin_src elisp
(use-package multi-vterm :ensure t)
;; Define keybindings for multi-vterm in Doom Emacs
(map! :leader
      (:prefix ("t" . "multi-vterm")
        :desc "Open multi-vterm" "t" #'multi-vterm
        :desc "Next vterm" "n" #'multi-vterm-next
        :desc "Previous vterm" "p" #'multi-vterm-prev))
#+end_src

** pixel-scroll
#+begin_src elisp
;; (pixel-scroll-mode 1)
;; (good-scroll-mode 1)
(pixel-scroll-precision-mode 1)

;; (setq
;;  scroll-conservatively 1000                     ;; only 'jump' when moving this far
;;  scroll-margin 4                                ;; scroll N lines to screen edge
;;  scroll-step 1                                  ;; keyboard scroll one line at a time
;;  mouse-wheel-scroll-amount '(6 ((shift) . 1))   ;; mouse scroll N lines
;;  mouse-wheel-progressive-speed nil              ;; don't accelerate scrolling

;;  redisplay-dont-pause t                         ;; don't pause display on input

;;  ;; Always redraw immediately when scrolling,
;;  ;; more responsive and doesn't hang!
;;  fast-but-imprecise-scrolling nil
;;  jit-lock-defer-time 0
;;  )

        ;; scroll one line at a time (less "jumpy" than defaults)
;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
(setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
;; (setq-default smooth-scroll-margin 0)
;; (setq scroll-step 1
;;       scroll-margin 1
;;       scroll-conservatively 100000) ;100000
#+end_src
** which key
#+begin_src elisp
(setq which-key-use-C-h-commands 't)
#+end_src

** Set Icons For Dired
#+begin_src elisp
;; (all-the-icons-dired-mode 1)
#+end_src
** BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.

Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.

| COMMAND         | DESCRIPTION                            | KEYBINDING |
|-----------------+----------------------------------------+------------|
| list-bookmarks  | /List bookmarks/                         | SPC b L    |
| bookmark-set    | /Set bookmark/                           | SPC b m    |
| bookmark-delete | /Delete bookmark/                        | SPC b M    |
| bookmark-save   | /Save current bookmark to bookmark file/ | SPC b w    |

#+BEGIN_SRC emacs-lisp
(setq bookmark-default-file "~/.config/doom/bookmarks")

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-delete
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC
** MU4E
#+begin_src elisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src
* theme
+ list of doom-theme
#+begin_src elisp
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-henna)

(setq doom-theme 'catppuccin)
;; (setq catppuccin-flavor latte) ;; or 'latte, 'macchiato, or 'mocha 'frappe
;; (catppuccin-reload)
#+end_src

* wks-mode-SH
https://github.com/3L0C/wks-mode.git
#+begin_src elisp
(use-package! wks-mode)
#+end_src


** flyspell enable
#+begin_src elisp
;; Set the location of aspell executable
(setq ispell-program-name "aspell")
;; (setq ispell-program-name "hunspell")

;; Set the default dictionary
(setq ispell-dictionary "en_US")
;; (setq ispell-local-dictionary "en_US")

;; Load Wucuo and set up hooks for programming and text modes
(after! wucuo
  (add-hook 'prog-mode-hook #'wucuo-start)
  (add-hook 'text-mode-hook #'wucuo-start))

;; Disable flyspell-mode and flyspell-prog-mode if enabled
(setq flyspell-mode nil)
(setq flyspell-prog-mode nil)

;; Configure Wucuo behavior
(setq wucuo-flyspell-start-mode 'fast) ;; Use 'normal' for more comprehensive checking
(setq wucuo-update-interval 5) ;; Adjust the interval as needed

;; Skip spell checking in certain modes
(setq wucuo-spell-check-buffer-predicate
      (lambda ()
        (not (memq major-mode
                   '(dired-mode
                     log-edit-mode
                     compilation-mode
                     help-mode
                     profiler-report-mode
                     speedbar-mode
                     gud-mode
                     calc-mode
                     Info-mode)))))
#+end_src
* colorful-mode
#+begin_src elisp
;; ~/.doom.d/config.el or ~/.config/doom/config.el
(use-package! colorful-mode
  :hook (prog-mode text-mode))
#+end_src

* dashboard in doom eamcs
#+begin_src elisp
;; (dolist (item '("Recently opened files"
;;                  "Reload last session"
;;                  "Open org-agenda"
;;                  "Open project"
;;                  "Jump to bookmark"
;;                  "Open private configuration"
;;                  "Open documentation"))
;;   (setq +doom-dashboard-menu-sections
;;         (assoc-delete-all item +doom-dashboard-menu-sections)))
;; (setq +doom-dashboard-name)

;; alternative way to do ⬇
;; (assoc-delete-all "Jump to bookmark" +doom-dashboard-menu-sections)
;; (assoc-delete-all "Open private configuration" +doom-dashboard-menu-sections)
;; (assoc-delete-all "Open documentation" +doom-dashboard-menu-sections)


  ;;set img
  ;; (setq fancy-splash-image (concat doom-private-dir "logo1.svg"))

  ;; set Dashboard asci
  ;; (defun my-weebery-is-always-greater ()
  ;;   (let* ((banner '("⢸⣿⣿⣿⣿⠃⠄⢀⣴⡾⠃⠄⠄⠄⠄⠄⠈⠺⠟⠛⠛⠛⠛⠻⢿⣿⣿⣿⣿⣶⣤⡀⠄"
  ;;                    "⢸⣿⣿⣿⡟⢀⣴⣿⡿⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⣷"
  ;;                    "⢸⣿⣿⠟⣴⣿⡿⡟⡼⢹⣷⢲⡶⣖⣾⣶⢄⠄⠄⠄⠄⠄⢀⣼⣿⢿⣿⣿⣿⣿⣿⣿⣿"
  ;;                    "⢸⣿⢫⣾⣿⡟⣾⡸⢠⡿⢳⡿⠍⣼⣿⢏⣿⣷⢄⡀⠄⢠⣾⢻⣿⣸⣿⣿⣿⣿⣿⣿⣿"
  ;;                    "⡿⣡⣿⣿⡟⡼⡁⠁⣰⠂⡾⠉⢨⣿⠃⣿⡿⠍⣾⣟⢤⣿⢇⣿⢇⣿⣿⢿⣿⣿⣿⣿⣿"
  ;;                    "⣱⣿⣿⡟⡐⣰⣧⡷⣿⣴⣧⣤⣼⣯⢸⡿⠁⣰⠟⢀⣼⠏⣲⠏⢸⣿⡟⣿⣿⣿⣿⣿⣿"
  ;;                    "⣿⣿⡟⠁⠄⠟⣁⠄⢡⣿⣿⣿⣿⣿⣿⣦⣼⢟⢀⡼⠃⡹⠃⡀⢸⡿⢸⣿⣿⣿⣿⣿⡟"
  ;;                    "⣿⣿⠃⠄⢀⣾⠋⠓⢰⣿⣿⣿⣿⣿⣿⠿⣿⣿⣾⣅⢔⣕⡇⡇⡼⢁⣿⣿⣿⣿⣿⣿⢣"
  ;;                    "⣿⡟⠄⠄⣾⣇⠷⣢⣿⣿⣿⣿⣿⣿⣿⣭⣀⡈⠙⢿⣿⣿⡇⡧⢁⣾⣿⣿⣿⣿⣿⢏⣾"
  ;;                    "⣿⡇⠄⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⠇⠄⠄⢿⣿⡇⢡⣾⣿⣿⣿⣿⣿⣏⣼⣿"
  ;;                    "⣿⣷⢰⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣧⣀⡄⢀⠘⡿⣰⣿⣿⣿⣿⣿⣿⠟⣼⣿⣿"
  ;;                    "⢹⣿⢸⣿⣿⠟⠻⢿⣿⣿⣿⣿⣿⣿⣿⣶⣭⣉⣤⣿⢈⣼⣿⣿⣿⣿⣿⣿⠏⣾⣹⣿⣿"
  ;;                    "⢸⠇⡜⣿⡟⠄⠄⠄⠈⠙⣿⣿⣿⣿⣿⣿⣿⣿⠟⣱⣻⣿⣿⣿⣿⣿⠟⠁⢳⠃⣿⣿⣿"
  ;;                    "⠄⣰⡗⠹⣿⣄⠄⠄⠄⢀⣿⣿⣿⣿⣿⣿⠟⣅⣥⣿⣿⣿⣿⠿⠋⠄⠄⣾⡌⢠⣿⡿⠃"
  ;;                    "⠜⠋⢠⣷⢻⣿⣿⣶⣾⣿⣿⣿⣿⠿⣛⣥⣾⣿⠿⠟⠛⠉⠄⠄          "))
  ;;          (longest-line (apply #'max (mapcar #'length banner))))
  ;;     (put-text-property
  ;;      (point)
  ;;      (dolist (line banner (point))
  ;;        (insert (+doom-dashboard--center
  ;;                 +doom-dashboard--width
  ;;                 (concat line (make-string (max 0 (- longest-line (length line))) 32)))
  ;;                "\n"))
  ;;      'face 'doom-dashboard-banner)))
  ;; (setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater)

#+end_src

#+RESULTS:
| Recently opened files | :icon | (nerd-icons-faicon nf-fa-file_text :face 'doom-dashboard-menu-title) | :action | recentf-open-files |
* dashboard my own
#+begin_src elisp
(setq   dashboard-set-heading-icons t
        dashboard-set-file-icons t
        ;; dashboard-banner-logo-title "emacs rocks
        ;; dashboard-startup-banner 'logo
        ;; dashboard-center-content nil
        dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          ;; (projects . 3)
                          ;; (registers . 5)
                          (agenda . 3)))
;; (setq dashboard-item-shortcuts '((recents   . "r")
;;                                  (bookmarks . "b")
;;                                  (projects  . "p")
;;                                  (agenda    . "a")
;;                                  (registers . "e")))

;; center content
;; (setq dashboard-center-content t)
;; (setq dashboard-vertically-center-content t)


;; set txt file
;; (setq dashboard-startup-banner "~/.config/doom/logo.txt")
;; set png
;; (setq dashboard-startup-banner "~/.config/doom/empty.png")

(setq dashboard-startup-banner "~/.config/doom/logo1.svg")

(setq dashboard-banner-logo-title nil)
  (dashboard-setup-startup-hook)

;; fix emacsclaint dashbord on startup
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
;; fix icon on emacs emacsclaint
(setq dashboard-display-icons-p t)
(setq page-break-lines-mode 1)

#+end_src
* toggle-maximize-buffer fullscrean
https://gist.github.com/mads-hartmann/3402786
#+begin_src elisp
(defun my/toggle-maximize-buffer () "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
      (jump-to-register '_)
    (progn
      (window-configuration-to-register '_)
      (delete-other-windows))))

(map! :n "M-f" #'my/toggle-maximize-buffer
      :i "M-f" #'my/toggle-maximize-buffer
      :v "M-f" #'my/toggle-maximize-buffer)
#+end_src
* ELLAMA
#+begin_src elisp
(use-package ellama
  :init
  (setopt ellama-keymap-prefix "C-c e")  ;; keymap for all ellama functions
  (setopt ellama-language "English")     ;; language ellama should translate to
  (require 'llm-ollama)
  (setopt ellama-provider
	  (make-llm-ollama
	   ;; this model should be pulled to use it
	   ;; value should be the same as you print in terminal during pull
	   :chat-model "llama3.1"
	   :embedding-model "nomic-embed-text"
	   :default-chat-non-standard-params '(("num_ctx" . 8192))))
  ;; Predefined llm providers for interactive switching.
  (setopt ellama-providers
		    '(("zephyr" . (make-llm-ollama
				   :chat-model "zephyr"
				   :embedding-model "zephyr"))

		      ("llama3.1" . (make-llm-ollama
				   :chat-model "llama3.1"
				   :embedding-model "llama3.1"))
		      ("mixtral" . (make-llm-ollama
				    :chat-model "mixtral"
				    :embedding-model "mixtral"))))
  (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
  ;; Translation llm provider
  (setopt ellama-translation-provider (make-llm-ollama
				       :chat-model "mixtral"
				       :embedding-model "nomic-embed-text"))
  :config
  (setq ellama-sessions-directory "~/.config/doom/ellama-sessions/"
        ellama-sessions-auto-save t))

(map! :leader
      :desc "A.I." "a"  '(:ignore t)
      :desc "Ask ellama about region" "a a" #'ellama-ask-about
      :desc "Ellama enhance" "a e"  '(:ignore t)
      :desc "Ellama enhance grammar" "a e g" #'ellama-improve-wording
      :desc "Ellama enhance wording" "a e w" #'ellama-improve-grammar
      :desc "Ask ellama" "a i" #'ellama-chat
      :desc "Ellama provider select" "a p" #'ellama-provider-select
      :desc "Ellama summarize region" "a s" #'ellama-summarize
      :desc "Ellama translate region" "a t" #'ellama-translate)
#+end_src


* Custom keybindings for window navigation in Doom Emacs
#+begin_src elisp
(map! :n "C-h" #'evil-window-left
      :n "C-j" #'evil-window-down
      :n "C-k" #'evil-window-up
      :n "C-l" #'evil-window-right)

;; keybindings for window splitting
(map!
 :leader
 "-" #'evil-window-split
 "|" #'evil-window-vsplit)
#+end_src
* fixed backward word del
#+begin_src elisp
;; (global-set-key (kbd "M-DEL") #'backward-kill-word)
(defun my/backward-kill-spaces-or-char-or-word ()
  (interactive)
  (cond
   ((looking-back (rx (char word)) 1)
    (backward-kill-word 1))
   ((looking-back (rx (char blank)) 1)
    (delete-horizontal-space t))
   (t
    (backward-delete-char 1))))
(global-set-key (kbd "<C-backspace>") 'my/backward-kill-spaces-or-char-or-word)

#+end_src
