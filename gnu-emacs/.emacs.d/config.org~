* Appearance
** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
      :if window-system
      :ensure t
      :config
      (load-theme 'doom-molokai t)
      (doom-themes-org-config)
      (doom-themes-visual-bell-config)
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (fringe-mode -1)
      (scroll-bar-mode -1))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "JetBrainsMono Nerd Font-22"))
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator (quote arrow))
  (spaceline-spacemacs-theme))
#+END_SRC

*** Fancy Battery
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
  :ensure t
  :init
  (fancy-battery-mode 1)
  (setq fancy-battery-show-percentage t))
#+END_SRC
* Basic Interface Settings
** Remove lame startup screen
We use an actual replacement for it, keep reading or head directly to dashboard
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Disable menus and scrollbars
If you like using any of those, change =-1= to =1=.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** Disable bell
This is annoying, remove this line if you like being visually reminded of events.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Functionality
*** Disable backups and auto-saves
I don't use either, you might want to turn those from =nil= to =t= if you do.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files t)
  (setq auto-save-default t)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** TODO org-insert-source-block

** Cool Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :init)

  (use-package all-the-icons-dired
    :ensure t
    :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons-ibuffer
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))
#+END_SRC

** copyC current line to the clipboard
#+BEGIN_SRC emacs-lisp
(defun my-line-save ()
  (interactive)
  (let ((l(substring (thing-at-point 'line)0 -1)))
    (kill-new l)
    (message "saved : %s" l)))
(local-set-key (kbd "C-c w") #'my-line-save)
#+END_SRC

** Completion
*** vertigo
#+BEGIN_SRC emacs-lisp
    ;; Enable vertico
   (use-package compat
     :ensure t)

  (use-package vertico
    :ensure t
    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
     (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))

  (setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t)
#+END_SRC

*** orderless
I recommend to give Orderless completion a try, which is more flexible and powerful than the default completion styles.
#+BEGIN_SRC emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless			
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** ido-mode
do not touch it will mess up vertigo *comp* ex C-x b
#+BEGIN_SRC emacs-lisp
;;  (ido-mode 1)
;;  (setq ido-separator "\n")
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** VTerm
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :ensure t
  :init
  (global-set-key (kbd "<s-return>") 'vterm))
#+END_SRC

* key-map
#+BEGIN_SRC emacs-lisp
  ;; remap redo from C-M-_ to  C-x U 
  (global-set-key (kbd "C-x U") 'undo-redo)

  ;;  Kill whole word
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)

  ;;  Copy whole line
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC


* Magit 
(use-package magit
  :ensure t
  :config
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  :bind
  ("M-g" . magit-status))
