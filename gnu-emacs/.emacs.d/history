;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(read-number-history xref--read-pattern-history xref--read-identifier-history goto-line-history command-history file-name-history buffer-name-history minibuffer-history extended-command-history))
(setq command-history '((vundo) (execute-extended-command nil "vundo") (vundo) (execute-extended-command nil "vundo") (vundo) (execute-extended-command nil "vundo") (vundo) (execute-extended-command nil "vundo" "vu") (execute-extended-command nil "") (kill-buffer "*vterm*") (execute-extended-command nil "kill-buffer" "buff kill") (vterm nil) (execute-extended-command nil "vterm" "vterm") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region" "eva") (find-file "~/.emacs.d/config.org" t) (lisp-mode) (execute-extended-command nil "lisp-mode" "lisp") (emacs-lisp-mode) (execute-extended-command nil "emacs-lisp-mode" "emacs lisp") (execute-extended-command nil "recentf-open" "rec") (describe-function 'recentf-mode) (switch-to-buffer "*scratch*" nil 'force-same-window) (savehist-mode 'toggle) (execute-extended-command nil "savehist-mode") (savehist-mode 'toggle) (execute-extended-command nil "savehist-mode" "save hi") (recentf-open-files) (execute-extended-command nil "recentf-open-files" "rece file") (execute-extended-command nil "recentf" "ec") (dashboard-refresh-buffer) (execute-extended-command nil "dashboard-refresh-buffer" "das ref") (find-file "~/.emacs.d/config.org" t) (vterm nil) (execute-extended-command nil "vterm" "vterm") (dired "~/" nil) (execute-extended-command nil "dired") (dired "~/.emacs.d/config.org" nil) (execute-extended-command nil "dired" "ir") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (find-file "~/.emacs.d/config.org" t) (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region" "eval") (switch-to-buffer "*Messages*" nil 'force-same-window) (comment-line 1) (execute-extended-command nil "comment-line" "comment li") (nerd-icons-install-fonts nil) (execute-extended-command nil "nerd-icons-install-fonts") (dired "~/.emacs.d/" nil) (nerd-icons-install-fonts nil) (execute-extended-command nil "nerd-icons-install-fonts" "nerd insta") (find-file "~/.emacs.d/config.org" t) (comment-region (region-beginning) (region-end) nil) (execute-extended-command nil "comment-region" "commen re") (find-file "~/.emacs.d/config.org" t) (dired "~/.dotfiles/" nil) (execute-extended-command nil "dired" "dired") (dired "~/.dotfiles/" nil) (execute-extended-command nil "dired" "dired") (find-file "~/.emacs.d/config.org" t) (display-battery-mode 'toggle) (execute-extended-command nil "display-battery-mode" "display ba") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region" "eva") (find-file "~/.emacs.d/config.org" t) (package-install 'doom-modeline nil) (execute-extended-command nil "package-install" "pac") (previous-buffer 1 1) (execute-extended-command nil "previous-buffer") (switch-to-buffer "*scratch*" nil 'force-same-window) (switch-to-buffer "init.el" nil 'force-same-window) (switch-to-buffer "config.org" nil 'force-same-window) (find-file "~/.emacs.d/init.el" t) (previous-buffer 1 1) (execute-extended-command nil "previous-buffer" "buff pre") (ibuffer nil) (execute-extended-command nil "ibuffer" "ib") (find-file "~/.emacs.d/config.org" t) (find-file "~/.emacs.d/config.org" t) (find-file "~/.emacs.d/config.org_archive" t) (find-file "~/.emacs.d/init.el" t) (switch-to-buffer "config.org" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (undo-redo 1) (execute-extended-command nil "undo-redo" "redo") (find-file "~/.emacs.d/init.el" t) (switch-to-buffer "*Messages*" nil 'force-same-window) (vterm nil)))
(setq file-name-history '("~/.emacs.d/config.org" "~/" "~/.emacs.d/config.org" "~/.emacs.d/" "~/.emacs.d/config.org" "~/Downloads/adin_x_nick_fuentes_x_sneako_x_tate_messages.txt" "~/.dotfiles/" "~/.emacs.d/config.org" "~/.emacs.d/init.el" "~/.emacs.d/config.org" "~/.emacs.d/config.org_archive" "~/.emacs.d/init.el" "~/.emacs.d/config.org" "~/.emacs.d/init.el" "~/.emacs.d/config.org"))
(setq buffer-name-history '("*vterm*" "*scratch*" "*Messages*" "*scratch*" "init.el" "config.org" "*Messages*" "init.el" "config.org" "*Ibuffer*" "*Warnings*"))
(setq minibuffer-history '("recentf-mode" "doom-modeline"))
(setq extended-command-history '("vundo" "kill-buffer" "vterm" "eval-region" "lisp-mode" "emacs-lisp-mode" "recentf-open" "savehist-mode" "recentf-open-files" "recentf" "dashboard-refresh-buffer" "vterm" "dired" "eval-region" "comment-line" "nerd-icons-install-fonts" "comment-region" "dired" "display-battery-mode" "eval-region" "package-install" "previous-buffer" "ibuffer" "undo-redo" "vterm" "ibuffer" "switch-to-buffer" "ido-kill-buffer" "kill-buffer" "vterm-mode" "vertico-buffer-mode" "ibuffer" "my-line-save" "eval-region" "package-install" "eval-region" "package-install" "package-refresh-contents"))
